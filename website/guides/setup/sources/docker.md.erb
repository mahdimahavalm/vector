<%- source = metadata.sources.docker -%>
<%= setup_guide("setup/sources/#{source.name}", source: source) %>

## Deployment Strategy

<SVG src="/img/tutorials/sources/docker.svg" />

---

For this guide we'll be using Vector, which is a lightweight and ultra-fast
utility for building observability pipelines. We'll deploy Vector as a dedicated
Logging container. This has a number of advantages:

1. **Same workflow** - Vector is deploy as a container like your other services.
1. **Dependency free** - You do not need to install anything on the host.
1. **Easy to scale** - Simply deploy more logging containers as necessary.
1. **Fast & reliable** - Built in [Rust][urls.rust], Vector is [blistering fast and memory efficient][urls.vector_performance].
1. **Flexible** - Vector includes a robust set of [transforms][docs.transforms] to process your data.


## A Simple Step-By-Step Tutorial

<div className="steps steps--h3">

1. ### Configure Vector

<%= create_config_command(source: metadata.sources.docker, default_sink: metadata.sinks.console).indent(3) %>

2. ### Start Vector as a container

   ```bash
   docker run \
   -v /var/run/docker.sock:/var/run/docker.sock \
   -v $PWD/vector.toml:/etc/vector/vector.toml:ro \
   timberio/vector:latest-alpine
   ```

   <CodeExplanation>

   * The first `-v` flag ensures that Vector has access to the Docker socket.
     This is how Vector receives Docker logs.
   * The second `-v` flag passes the previously created Vector configuration
     file into the container.

   </CodeExplanation>

   That's it! Simple and to the point. Hit `ctrl+c` to exit.

</div>

## Next Steps

1. Explore Vector's transforms for ways to further process your data.
2. Explore Vector's [guides][guides.index] and [docs.index] to unlock the full
   potential of Vector.
